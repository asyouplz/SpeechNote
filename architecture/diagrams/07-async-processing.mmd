%%{init: {'theme':'neutral'}}%%

sequenceDiagram
    participant User
    participant UI
    participant StateManager
    participant TranscriptionService
    participant QueueManager
    participant Worker
    participant WhisperAPI
    participant Cache
    participant ProgressTracker
    
    %% Async processing initiation
    User->>UI: Select multiple files
    UI->>TranscriptionService: transcribeMultiple(files[])
    TranscriptionService->>StateManager: setState(PROCESSING)
    
    %% Queue management
    loop For each file
        TranscriptionService->>QueueManager: enqueue(file)
        QueueManager->>QueueManager: Validate file
        QueueManager-->>ProgressTracker: Update total count
    end
    
    QueueManager->>Worker: Start processing
    
    %% Parallel processing with concurrency control
    par Worker 1
        Worker->>QueueManager: dequeue()
        QueueManager-->>Worker: File 1
        Worker->>Cache: check(file1.hash)
        alt Not in cache
            Worker->>WhisperAPI: transcribe(file1)
            WhisperAPI-->>Worker: Result 1
            Worker->>Cache: store(file1.hash, result1)
        else In cache
            Cache-->>Worker: Cached result 1
        end
        Worker->>ProgressTracker: Update progress
        Worker->>StateManager: Update file status
    and Worker 2
        Worker->>QueueManager: dequeue()
        QueueManager-->>Worker: File 2
        Worker->>WhisperAPI: transcribe(file2)
        WhisperAPI-->>Worker: Result 2
        Worker->>ProgressTracker: Update progress
    and Worker 3
        Worker->>QueueManager: dequeue()
        QueueManager-->>Worker: File 3
        Worker->>WhisperAPI: transcribe(file3)
        WhisperAPI-->>Worker: Result 3
        Worker->>ProgressTracker: Update progress
    end
    
    %% Progress updates
    loop While processing
        ProgressTracker->>StateManager: Update progress %
        StateManager->>UI: Refresh progress bar
        UI-->>User: Show progress
    end
    
    %% Cancellation handling
    opt User cancels
        User->>UI: Click cancel
        UI->>TranscriptionService: cancel()
        TranscriptionService->>QueueManager: clearQueue()
        TranscriptionService->>Worker: abortAll()
        Worker->>WhisperAPI: Cancel requests
        Worker->>StateManager: setState(CANCELLED)
        StateManager->>UI: Show cancelled
        UI-->>User: Operation cancelled
    end
    
    %% Error handling with retry
    alt API Error
        WhisperAPI-->>Worker: Error (429 Rate Limit)
        Worker->>Worker: Wait with backoff
        Worker->>WhisperAPI: Retry request
        alt Retry success
            WhisperAPI-->>Worker: Result
            Worker->>ProgressTracker: Update progress
        else Max retries reached
            Worker->>QueueManager: Move to failed queue
            Worker->>StateManager: Update error count
        end
    end
    
    %% Completion
    QueueManager->>TranscriptionService: All complete
    TranscriptionService->>StateManager: setState(COMPLETED)
    StateManager->>UI: Show completion
    UI-->>User: All files transcribed
    
    Note over QueueManager: Priority queue with FIFO default
    Note over Worker: Max 3 concurrent workers
    Note over Cache: LRU cache with TTL
    Note over WhisperAPI: Rate limited to 50 req/min