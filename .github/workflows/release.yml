name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  # Î¶¥Î¶¨Ïä§ Ï§ÄÎπÑ
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

  # ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run all tests
        run: npm run test:ci
        
      - name: Build production bundle
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Create release archive
        run: |
          mkdir -p release
          cp main.js manifest.json README.md LICENSE release/
          cp -r docs release/
          zip -r "obsidian-speech-to-text-${{ needs.prepare-release.outputs.version }}.zip" release/
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            obsidian-speech-to-text-*.zip
            main.js
            manifest.json

  # Î¶¥Î¶¨Ïä§ ÎÖ∏Ìä∏ ÏÉùÏÑ±
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      release_notes: ${{ steps.notes.outputs.notes }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: notes
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## What's Changed" > release-notes.md
          echo "" >> release-notes.md
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Ïª§Î∞ã Î∂ÑÎ•ò
            echo "### üöÄ Features" >> release-notes.md
            git log ${PREVIOUS_TAG}..HEAD --grep="feat:" --pretty="- %s" >> release-notes.md || true
            
            echo "" >> release-notes.md
            echo "### üêõ Bug Fixes" >> release-notes.md
            git log ${PREVIOUS_TAG}..HEAD --grep="fix:" --pretty="- %s" >> release-notes.md || true
            
            echo "" >> release-notes.md
            echo "### üì¶ Dependencies" >> release-notes.md
            git log ${PREVIOUS_TAG}..HEAD --grep="deps:" --pretty="- %s" >> release-notes.md || true
            
            echo "" >> release-notes.md
            echo "### üìö Documentation" >> release-notes.md
            git log ${PREVIOUS_TAG}..HEAD --grep="docs:" --pretty="- %s" >> release-notes.md || true
            
            echo "" >> release-notes.md
            echo "### üîß Maintenance" >> release-notes.md
            git log ${PREVIOUS_TAG}..HEAD --grep="chore:" --pretty="- %s" >> release-notes.md || true
          else
            echo "Initial release" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}" >> release-notes.md
          
          # Î©ÄÌã∞ÎùºÏù∏ Ï∂úÎ†• Ï≤òÎ¶¨
          {
            echo 'notes<<EOF'
            cat release-notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  # GitHub Î¶¥Î¶¨Ïä§ ÏÉùÏÑ±
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, generate-release-notes]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
          files: |
            obsidian-speech-to-text-*.zip
            main.js
            manifest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Obsidian Community ÌîåÎü¨Í∑∏Ïù∏ ÏóÖÎç∞Ïù¥Ìä∏
  update-community-plugin:
    name: Update Community Plugin
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: ${{ !contains(needs.prepare-release.outputs.version, '-') }}
    
    steps:
      - name: Checkout community plugins repo
        uses: actions/checkout@v4
        with:
          repository: obsidianmd/obsidian-releases
          token: ${{ secrets.COMMUNITY_PLUGIN_TOKEN }}
          
      - name: Update plugin manifest
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          # community-plugins.json ÏóÖÎç∞Ïù¥Ìä∏
          jq '.["speech-to-text"].version = "'${VERSION_NUMBER}'"' community-plugins.json > tmp.json
          mv tmp.json community-plugins.json
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.COMMUNITY_PLUGIN_TOKEN }}
          commit-message: "Update Speech to Text plugin to ${{ needs.prepare-release.outputs.version }}"
          title: "Update Speech to Text plugin to ${{ needs.prepare-release.outputs.version }}"
          body: |
            This PR updates the Speech to Text plugin to version ${{ needs.prepare-release.outputs.version }}.
            
            Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}
          branch: speech-to-text-${{ needs.prepare-release.outputs.version }}

  # Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Update version in docs
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          # README Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s/Version: .*/Version: ${VERSION_NUMBER}/" README.md
          
          # Î¨∏ÏÑú ÎÇ¥ Î≤ÑÏ†Ñ Ï∞∏Ï°∞ ÏóÖÎç∞Ïù¥Ìä∏
          find docs -type f -name "*.md" -exec sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/${VERSION}/g" {} \;
          
      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "docs: update version to ${{ needs.prepare-release.outputs.version }}"
          git push

  # ÏïåÎ¶º Î∞úÏÜ°
  notify-release:
    name: Send Release Notifications
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    
    steps:
      - name: Send Discord notification
        if: ${{ success() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\"üéâ **Speech to Text ${VERSION} Released!**\n\nCheck out the release: https://github.com/${{ github.repository }}/releases/tag/${VERSION}\"}" \
            $DISCORD_WEBHOOK
            
      - name: Send failure notification
        if: ${{ failure() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\"‚ùå **Release ${{ needs.prepare-release.outputs.version }} Failed!**\n\nCheck the workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            $DISCORD_WEBHOOK