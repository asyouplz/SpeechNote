name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  # 린트 및 타입 체크
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check formatting
        run: npm run format:check
        
      - name: Type check
        run: npm run typecheck
        
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: lint-results.xml

  # 유닛 테스트
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ matrix.node-version }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit -- --coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit-tests-node-${{ matrix.node-version }}
          name: unit-coverage-node-${{ matrix.node-version }}
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: reports/junit.xml

  # 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: npm run test:integration -- --coverage
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
          TEST_API_URL: ${{ secrets.TEST_API_URL }}
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: integration-tests
          name: integration-coverage
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: reports/junit.xml

  # E2E 테스트
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        run: npm run test:e2e -- --coverage
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/e2e/lcov.info
          flags: e2e-tests
          name: e2e-coverage
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            reports/e2e/
            tests/e2e/screenshots/
            
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/

  # 빌드 테스트
  build:
    name: Build Test
    runs-on: ${{ matrix.os }}
    needs: quality-check
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ matrix.os }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: |
            main.js
            main.js.map
            manifest.json
            
      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          ls -lh main.js
          size=$(stat -f%z main.js 2>/dev/null || stat -c%s main.js)
          if [ $size -gt 5242880 ]; then
            echo "Bundle size exceeds 5MB limit!"
            exit 1
          fi

  # 보안 검사
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: snyk-report.json

  # 성능 테스트
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-latest
          
      - name: Run performance tests
        run: |
          npm install -g lighthouse
          # 실제 성능 테스트 명령어
          echo "Running performance tests..."
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: lighthouse-report.html

  # 커버리지 리포트
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        
      - name: Merge coverage reports
        run: |
          npm install -g nyc
          nyc merge coverage coverage/merged
          nyc report --reporter=lcov --report-dir=coverage/final
          
      - name: Upload final coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/final/lcov.info
          flags: all-tests
          name: merged-coverage
          
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/final/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check coverage thresholds
        run: |
          nyc check-coverage --lines 80 --functions 75 --branches 70

  # 최종 상태 체크
  status-check:
    name: Final Status Check
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, integration-tests, e2e-tests, build, security, coverage-report]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.quality-check.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.coverage-report.result }}" != "success" ]]; then
            echo "One or more critical jobs failed"
            exit 1
          fi
          echo "All critical jobs passed successfully!"
          
      - name: Create status badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Creating status badge..."
          # Badge 생성 로직