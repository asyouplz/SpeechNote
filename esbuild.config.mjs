import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { promises as fs } from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/`;

const prod = (process.argv[2] === "production");
const watch = !prod && process.argv[2] !== "build";

// Ensure output directory exists
const outdir = ".";
await fs.mkdir(outdir, { recursive: true });

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    minify: prod,
    define: {
        'process.env.NODE_ENV': prod ? '"production"' : '"development"'
    },
    plugins: [
        {
            name: 'clean',
            setup(build) {
                build.onStart(async () => {
                    // Clean previous build artifacts
                    try {
                        await fs.unlink('main.js');
                    } catch (e) {
                        // File doesn't exist, ignore
                    }
                    try {
                        await fs.unlink('main.js.map');
                    } catch (e) {
                        // File doesn't exist, ignore
                    }
                });
            }
        },
        {
            name: 'notify',
            setup(build) {
                build.onEnd(result => {
                    if (result.errors.length > 0) {
                        console.error('❌ Build failed with errors:');
                        result.errors.forEach(error => {
                            console.error(error);
                        });
                    } else if (result.warnings.length > 0) {
                        console.warn('⚠️ Build succeeded with warnings:');
                        result.warnings.forEach(warning => {
                            console.warn(warning);
                        });
                    } else {
                        const time = new Date().toLocaleTimeString();
                        console.log(`✅ Build succeeded at ${time}`);
                    }
                });
            }
        }
    ]
});

if (prod) {
    // Production build
    await context.rebuild();
    console.log("🚀 Production build complete");
    process.exit(0);
} else if (watch) {
    // Development with watch mode
    console.log("👀 Watching for changes...");
    await context.watch();
} else {
    // Single development build
    await context.rebuild();
    console.log("✅ Development build complete");
    await context.dispose();
}